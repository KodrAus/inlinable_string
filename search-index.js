var searchIndex = {};
searchIndex["inlinable_string"] = {"doc":"The `inlinable_string` crate provides the\n[`InlinableString`](./enum.InlinableString.html) type &amp;mdash; an owned,\ngrow-able UTF-8 string that stores small strings inline and avoids\nheap-allocation &amp;mdash; and the\n[`StringExt`](./string_ext/trait.StringExt.html) trait which abstracts\nstring operations over both `std::string::String` and `InlinableString` (or\neven your own custom string type).","items":[[4,"InlinableString","inlinable_string","An owned, grow-able UTF-8 string that allocates short strings inline on the\nstack.",null,null],[13,"Heap","","A heap-allocated string.",0,null],[13,"Inline","","A small string stored inline.",0,null],[0,"inline_string","","A short UTF-8 string that uses inline storage and does no heap\nallocation. It may be no longer than `INLINE_STRING_CAPACITY` bytes long.",null,null],[3,"InlineString","inlinable_string::inline_string","A short UTF-8 string that uses inline storage and does no heap allocation.",null,null],[3,"NotEnoughSpaceError","","The error returned when there is not enough space in a `InlineString` for the\nrequested operation.",null,null],[17,"INLINE_STRING_CAPACITY","","The capacity (in bytes) of inline storage for small strings.\n`InlineString::len()` may never be larger than this.",null,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"as_ref","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"as_mut","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"inlinestring"}}],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"inlinestring"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"new","","Creates a new string buffer initialized with the empty string.",1,{"inputs":[],"output":{"name":"inlinestring"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8. Trailing bytes are\nzeroed.",1,null],[11,"push_str","","Pushes the given string onto this string buffer.",1,null],[11,"push","","Adds the given character to the end of the string.",1,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",1,null],[11,"truncate","","Shortens a string to the specified length.",1,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",1,null],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",1,null],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",1,null],[11,"as_mut_slice","","Views the internal string buffer as a mutable sequence of bytes.",1,null],[11,"len","","Returns the number of bytes in this string.",1,null],[11,"is_empty","","Returns true if the string contains no bytes",1,null],[11,"clear","","Truncates the string, returning it to 0 length.",1,null],[0,"string_ext","inlinable_string","A trait that exists to abstract string operations over any number of\nconcrete string type implementations.",null,null],[8,"StringExt","inlinable_string::string_ext","A trait that exists to abstract string operations over any number of\nconcrete string type implementations.",null,null],[10,"new","","Creates a new string buffer initialized with the empty string.",3,{"inputs":[],"output":{"name":"self"}}],[10,"with_capacity","","Creates a new string buffer with the given capacity. The string will be\nable to hold at least `capacity` bytes without reallocating. If\n`capacity` is less than or equal to `INLINE_STRING_CAPACITY`, the string\nwill not heap allocate.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",3,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",3,null],[10,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `InlinableString`, returning `None`\nif `v` contains any invalid data.",3,null],[10,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",3,null],[10,"from_raw_parts","","Creates a new `InlinableString` from a length, capacity, and pointer.",3,null],[10,"from_utf8_unchecked","","Converts a vector of bytes to a new `InlinableString` without checking\nif it contains valid UTF-8. This is unsafe because it assumes that the\nUTF-8-ness of the vector has already been validated.",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",3,null],[10,"push_str","","Pushes the given string onto this string buffer.",3,null],[10,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",3,null],[10,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `InlinableString`. The collection may reserve more space to avoid\nfrequent reallocations.",3,null],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `InlinableString`. Does nothing if the capacity is already\nsufficient.",3,null],[10,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length. If the\nstring&#39;s length is less than `INLINE_STRING_CAPACITY` and the string is\nheap-allocated, then it is demoted to inline storage.",3,null],[10,"push","","Adds the given character to the end of the string.",3,null],[10,"as_bytes","","Works with the underlying buffer as a byte slice.",3,null],[10,"truncate","","Shortens a string to the specified length.",3,null],[10,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",3,null],[10,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",3,null],[10,"insert","","Inserts a character into the string buffer at byte position `idx`.",3,null],[10,"as_mut_slice","","Views the string buffer as a mutable sequence of bytes.",3,null],[10,"len","","Returns the number of bytes in this string.",3,null],[11,"is_empty","","Returns true if the string contains no bytes",3,null],[11,"clear","","Truncates the string, returning it to 0 length.",3,null],[11,"clone","inlinable_string","",0,null],[11,"fmt","","",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"inlinablestring"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"inlinablestring"}}],[11,"extend","","",0,null],[11,"extend","","",0,null],[11,"extend","","",0,null],[11,"add","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"borrow","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"inlinablestring"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"inlinablestring"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"index_mut","","",0,null],[11,"index_mut","","",0,null],[11,"index_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"eq","inlinable_string::inline_string","",1,null],[11,"ne","","",1,null],[11,"eq","inlinable_string","",0,null],[11,"ne","","",0,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_utf8","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf16","","",0,null],[11,"from_utf16_lossy","","",0,null],[11,"from_raw_parts","","",0,null],[11,"from_utf8_unchecked","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_bytes","","",0,null],[11,"push_str","","",0,null],[11,"capacity","","",0,null],[11,"reserve","","",0,null],[11,"reserve_exact","","",0,null],[11,"shrink_to_fit","","",0,null],[11,"push","","",0,null],[11,"as_bytes","","",0,null],[11,"truncate","","",0,null],[11,"pop","","",0,null],[11,"remove","","",0,null],[11,"insert","","",0,null],[11,"as_mut_slice","","",0,null],[11,"len","","",0,null]],"paths":[[4,"InlinableString"],[3,"InlineString"],[3,"NotEnoughSpaceError"],[8,"StringExt"]]};
initSearch(searchIndex);
